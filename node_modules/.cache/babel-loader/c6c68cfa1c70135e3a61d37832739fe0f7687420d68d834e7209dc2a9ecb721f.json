{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api/auth\";\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  const data = await response.json();\n  if (!response.ok) {\n    // Handle backend errors\n    const error = data.message || `Request failed with status ${response.status}`;\n    throw new Error(error);\n  }\n  return data;\n};\n\n// Signup function\nexport const signup = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Signup Error:\", error);\n    throw new Error(error.message || \"Failed to signup. Please try again later.\");\n  }\n};\n\n// Login function\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    const data = await handleResponse(response);\n\n    // Store token in localStorage\n    if (data.token) {\n      localStorage.setItem(\"token\", data.token);\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Login Error:\", error);\n    throw new Error(error.message || \"Failed to login. Please try again later.\");\n  }\n};\n\n// Logout function\nexport const logout = () => {\n  localStorage.removeItem(\"token\");\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem(\"token\");\n};\n\n// Get current user's token\nexport const getToken = () => {\n  return localStorage.getItem(\"token\");\n};\n\n// Verify token with backend (optional)\nexport const verifyToken = async () => {\n  try {\n    const token = getToken();\n    if (!token) return false;\n    const response = await fetch(`${API_BASE_URL}/verify`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Token Verification Error:\", error);\n    logout(); // Clear invalid token\n    throw new Error(\"Session expired. Please login again.\");\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleResponse","response","data","json","ok","error","message","status","Error","signup","userData","fetch","method","headers","body","JSON","stringify","console","login","credentials","token","localStorage","setItem","logout","removeItem","isAuthenticated","getItem","getToken","verifyToken","Authorization"],"sources":["D:/drawing-app/src/services/authService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api/auth\";\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n    const data = await response.json();\r\n    if (!response.ok) {\r\n        // Handle backend errors\r\n        const error = data.message || `Request failed with status ${response.status}`;\r\n        throw new Error(error);\r\n    }\r\n    return data;\r\n};\r\n\r\n// Signup function\r\nexport const signup = async (userData) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/signup`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(userData),\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(\"Signup Error:\", error);\r\n        throw new Error(error.message || \"Failed to signup. Please try again later.\");\r\n    }\r\n};\r\n\r\n// Login function\r\nexport const login = async (credentials) => {\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/login`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(credentials),\r\n        });\r\n        const data = await handleResponse(response);\r\n\r\n        // Store token in localStorage\r\n        if (data.token) {\r\n            localStorage.setItem(\"token\", data.token);\r\n        }\r\n        return data;\r\n    } catch (error) {\r\n        console.error(\"Login Error:\", error);\r\n        throw new Error(error.message || \"Failed to login. Please try again later.\");\r\n    }\r\n};\r\n\r\n// Logout function\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n    return !!localStorage.getItem(\"token\");\r\n};\r\n\r\n// Get current user's token\r\nexport const getToken = () => {\r\n    return localStorage.getItem(\"token\");\r\n};\r\n\r\n// Verify token with backend (optional)\r\nexport const verifyToken = async () => {\r\n    try {\r\n        const token = getToken();\r\n        if (!token) return false;\r\n\r\n        const response = await fetch(`${API_BASE_URL}/verify`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${token}`,\r\n            },\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(\"Token Verification Error:\", error);\r\n        logout(); // Clear invalid token\r\n        throw new Error(\"Session expired. Please login again.\");\r\n    }\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,gCAAgC;;AAEtF;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACvC,MAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;IACd;IACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,OAAO,IAAI,8BAA8BL,QAAQ,CAACM,MAAM,EAAE;IAC7E,MAAM,IAAIC,KAAK,CAACH,KAAK,CAAC;EAC1B;EACA,OAAOH,IAAI;AACf,CAAC;;AAED;AACA,OAAO,MAAMO,MAAM,GAAG,MAAOC,QAAQ,IAAK;EACtC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMU,KAAK,CAAC,GAAGf,YAAY,SAAS,EAAE;MACnDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ;IACjC,CAAC,CAAC;IACF,OAAO,MAAMV,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZY,OAAO,CAACZ,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAM,IAAIG,KAAK,CAACH,KAAK,CAACC,OAAO,IAAI,2CAA2C,CAAC;EACjF;AACJ,CAAC;;AAED;AACA,OAAO,MAAMY,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,IAAI;IACA,MAAMlB,QAAQ,GAAG,MAAMU,KAAK,CAAC,GAAGf,YAAY,QAAQ,EAAE;MAClDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,WAAW;IACpC,CAAC,CAAC;IACF,MAAMjB,IAAI,GAAG,MAAMF,cAAc,CAACC,QAAQ,CAAC;;IAE3C;IACA,IAAIC,IAAI,CAACkB,KAAK,EAAE;MACZC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEpB,IAAI,CAACkB,KAAK,CAAC;IAC7C;IACA,OAAOlB,IAAI;EACf,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZY,OAAO,CAACZ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAM,IAAIG,KAAK,CAACH,KAAK,CAACC,OAAO,IAAI,0CAA0C,CAAC;EAChF;AACJ,CAAC;;AAED;AACA,OAAO,MAAMiB,MAAM,GAAGA,CAAA,KAAM;EACxBF,YAAY,CAACG,UAAU,CAAC,OAAO,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,OAAO,CAAC,CAACJ,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC1B,OAAON,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMR,KAAK,GAAGO,QAAQ,CAAC,CAAC;IACxB,IAAI,CAACP,KAAK,EAAE,OAAO,KAAK;IAExB,MAAMnB,QAAQ,GAAG,MAAMU,KAAK,CAAC,GAAGf,YAAY,SAAS,EAAE;MACnDgB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClCgB,aAAa,EAAE,UAAUT,KAAK;MAClC;IACJ,CAAC,CAAC;IACF,OAAO,MAAMpB,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZY,OAAO,CAACZ,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjDkB,MAAM,CAAC,CAAC,CAAC,CAAC;IACV,MAAM,IAAIf,KAAK,CAAC,sCAAsC,CAAC;EAC3D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
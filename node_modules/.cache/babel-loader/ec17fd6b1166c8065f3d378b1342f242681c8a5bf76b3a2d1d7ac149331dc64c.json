{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sanjay Singh\\\\Downloads\\\\drawing-app\\\\src\\\\NoteItCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport \"./NoteItCanvas.css\"; // For styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteItCanvas = () => {\n  _s();\n  const [note, setNote] = useState(\"\");\n  const [canvasRef, setCanvasRef] = useState(null);\n  const [color, setColor] = useState(\"#000\"); // Default brush color: black\n\n  // Function to save the drawing as an image\n  const saveDrawing = () => {\n    const canvas = canvasRef.canvasContainer.children[1];\n    const dataUrl = canvas.toDataURL(\"image/png\");\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"drawing.png\"; // File name for the saved image\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"color\",\n      value: color,\n      onChange: e => setColor(e.target.value) // Update color state when user selects a color\n      ,\n      style: {\n        margin: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvas => setCanvasRef(canvas),\n      brushColor: color // Set the brush color based on selected color\n      ,\n      brushRadius: 2,\n      lazyRadius: 0,\n      canvasWidth: 300,\n      canvasHeight: 300,\n      hideGrid: true,\n      className: \"drawing-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"note-input\",\n      placeholder: \"Write your note...\",\n      value: note,\n      onChange: e => setNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => canvasRef.clear(),\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => canvasRef.undo(),\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveDrawing,\n        children: \"Save Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteItCanvas, \"aFd9cSwR6s6KEhAC2tUxRc83H+0=\");\n_c = NoteItCanvas;\nexport default NoteItCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteItCanvas\");","map":{"version":3,"names":["React","useState","CanvasDraw","jsxDEV","_jsxDEV","NoteItCanvas","_s","note","setNote","canvasRef","setCanvasRef","color","setColor","saveDrawing","canvas","canvasContainer","children","dataUrl","toDataURL","link","document","createElement","href","download","click","className","type","value","onChange","e","target","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","ref","brushColor","brushRadius","lazyRadius","canvasWidth","canvasHeight","hideGrid","placeholder","onClick","clear","undo","_c","$RefreshReg$"],"sources":["C:/Users/Sanjay Singh/Downloads/drawing-app/src/NoteItCanvas.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport \"./NoteItCanvas.css\"; // For styling\r\n\r\nconst NoteItCanvas = () => {\r\n  const [note, setNote] = useState(\"\");\r\n  const [canvasRef, setCanvasRef] = useState(null);\r\n  const [color, setColor] = useState(\"#000\"); // Default brush color: black\r\n\r\n  // Function to save the drawing as an image\r\n  const saveDrawing = () => {\r\n    const canvas = canvasRef.canvasContainer.children[1];\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n    const link = document.createElement(\"a\");\r\n    link.href = dataUrl;\r\n    link.download = \"drawing.png\"; // File name for the saved image\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"note-container\">\r\n      {/* Color Picker for brush color */}\r\n      <input\r\n        type=\"color\"\r\n        value={color}\r\n        onChange={(e) => setColor(e.target.value)}  // Update color state when user selects a color\r\n        style={{ margin: '10px' }}\r\n      />\r\n\r\n      {/* Drawing Canvas */}\r\n      <CanvasDraw\r\n        ref={(canvas) => setCanvasRef(canvas)}\r\n        brushColor={color}  // Set the brush color based on selected color\r\n        brushRadius={2}\r\n        lazyRadius={0}\r\n        canvasWidth={300}\r\n        canvasHeight={300}\r\n        hideGrid\r\n        className=\"drawing-canvas\"\r\n      />\r\n      \r\n      {/* Text Input for Notes */}\r\n      <textarea\r\n        className=\"note-input\"\r\n        placeholder=\"Write your note...\"\r\n        value={note}\r\n        onChange={(e) => setNote(e.target.value)}\r\n      />\r\n\r\n      {/* Buttons */}\r\n      <div className=\"btn-group\">\r\n        <button onClick={() => canvasRef.clear()}>Clear</button>\r\n        <button onClick={() => canvasRef.undo()}>Undo</button>\r\n        <button onClick={saveDrawing}>Save Drawing</button> {/* Save button */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteItCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
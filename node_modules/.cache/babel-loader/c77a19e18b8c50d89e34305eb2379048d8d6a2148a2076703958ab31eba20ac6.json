{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  const contentType = response.headers.get('content-type');\n  if (!contentType || !contentType.includes('application/json')) {\n    // Handle non-JSON responses (e.g., HTML error pages)\n    const text = await response.text();\n    throw new Error(`Unexpected response: ${text}`);\n  }\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.message || `Request failed with status ${response.status}`);\n  }\n  return data;\n};\n\n// Login function\nexport const login = async credentials => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Login Error:', error);\n    throw new Error(error.message || 'Failed to login. Please try again later.');\n  }\n};\n\n// Signup function\nexport const signup = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error('Signup Error:', error);\n    throw new Error(error.message || 'Failed to signup. Please try again later.');\n  }\n};\n\n// Logout function\nexport const logout = () => {\n  localStorage.removeItem('token');\n};\n\n// Check if user is authenticated\nexport const isAuthenticated = () => {\n  return !!localStorage.getItem('token');\n};\n\n// Get current user's token\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","handleResponse","response","contentType","headers","get","includes","text","Error","data","json","ok","message","status","login","credentials","fetch","method","body","JSON","stringify","error","console","signup","userData","logout","localStorage","removeItem","isAuthenticated","getItem","getToken"],"sources":["D:/drawing-app/src/services/authService.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\r\n\r\n// Helper function to handle API responses\r\nconst handleResponse = async (response) => {\r\n  const contentType = response.headers.get('content-type');\r\n  if (!contentType || !contentType.includes('application/json')) {\r\n    // Handle non-JSON responses (e.g., HTML error pages)\r\n    const text = await response.text();\r\n    throw new Error(`Unexpected response: ${text}`);\r\n  }\r\n  const data = await response.json();\r\n  if (!response.ok) {\r\n    throw new Error(data.message || `Request failed with status ${response.status}`);\r\n  }\r\n  return data;\r\n};\r\n\r\n// Login function\r\nexport const login = async (credentials) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Login Error:', error);\r\n    throw new Error(error.message || 'Failed to login. Please try again later.');\r\n  }\r\n};\r\n\r\n// Signup function\r\nexport const signup = async (userData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/auth/signup`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(userData),\r\n    });\r\n    return await handleResponse(response);\r\n  } catch (error) {\r\n    console.error('Signup Error:', error);\r\n    throw new Error(error.message || 'Failed to signup. Please try again later.');\r\n  }\r\n};\r\n\r\n// Logout function\r\nexport const logout = () => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n// Check if user is authenticated\r\nexport const isAuthenticated = () => {\r\n  return !!localStorage.getItem('token');\r\n};\r\n\r\n// Get current user's token\r\nexport const getToken = () => {\r\n  return localStorage.getItem('token');\r\n};"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;;AAEvD;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,MAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC7D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAAC,wBAAwBD,IAAI,EAAE,CAAC;EACjD;EACA,MAAME,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAClC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;IAChB,MAAM,IAAIH,KAAK,CAACC,IAAI,CAACG,OAAO,IAAI,8BAA8BV,QAAQ,CAACW,MAAM,EAAE,CAAC;EAClF;EACA,OAAOJ,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMK,KAAK,GAAG,MAAOC,WAAW,IAAK;EAC1C,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,YAAY,aAAa,EAAE;MACzDoB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/Cc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IACF,OAAO,MAAMd,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAM,IAAIb,KAAK,CAACa,KAAK,CAACT,OAAO,IAAI,0CAA0C,CAAC;EAC9E;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,MAAM,GAAG,MAAOC,QAAQ,IAAK;EACxC,IAAI;IACF,MAAMtB,QAAQ,GAAG,MAAMc,KAAK,CAAC,GAAGnB,YAAY,cAAc,EAAE;MAC1DoB,MAAM,EAAE,MAAM;MACdb,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/Cc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACI,QAAQ;IAC/B,CAAC,CAAC;IACF,OAAO,MAAMvB,cAAc,CAACC,QAAQ,CAAC;EACvC,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACrC,MAAM,IAAIb,KAAK,CAACa,KAAK,CAACT,OAAO,IAAI,2CAA2C,CAAC;EAC/E;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,MAAM,GAAGA,CAAA,KAAM;EAC1BC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAO,CAAC,CAACF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAC5B,OAAOJ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\drawing-app\\\\src\\\\components\\\\Gallery.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Gallery = () => {\n  _s();\n  const [gallery, setGallery] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Fetch gallery images\n  const fetchGallery = async () => {\n    setIsLoading(true);\n    try {\n      console.log('Fetching images from backend...');\n      const response = await fetch('http://localhost:5000/api/gallery');\n      console.log('Response status:', response.status);\n      if (!response.ok) {\n        throw new Error('Failed to fetch gallery images.');\n      }\n      const result = await response.json();\n      console.log('Images fetched successfully:', result.images);\n      setGallery(result.images); // Save the list of image URLs\n    } catch (error) {\n      console.error('Error fetching gallery:', error);\n      alert('Failed to fetch gallery images.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Fetch gallery images when the component loads\n  useEffect(() => {\n    fetchGallery();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      fontFamily: 'Arial, sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gallery\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Image Gallery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading gallery...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this) : gallery.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No images found in the gallery.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '10px'\n        },\n        children: gallery.map((url, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: url,\n          alt: `Gallery ${index}`,\n          style: {\n            width: '200px',\n            height: '200px',\n            objectFit: 'cover',\n            border: '1px solid #ccc',\n            borderRadius: '5px'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Gallery, \"lJBmFs6gk7SkVzsoDNCD8sM42UA=\");\n_c = Gallery;\nexport default Gallery;\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Gallery","_s","gallery","setGallery","isLoading","setIsLoading","fetchGallery","console","log","response","fetch","status","ok","Error","result","json","images","error","alert","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","length","display","flexWrap","gap","map","url","index","src","alt","width","height","objectFit","border","borderRadius","_c","$RefreshReg$"],"sources":["D:/drawing-app/src/components/Gallery.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Gallery = () => {\r\n  const [gallery, setGallery] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Fetch gallery images\r\n  const fetchGallery = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      console.log('Fetching images from backend...');\r\n      const response = await fetch('http://localhost:5000/api/gallery');\r\n\r\n      console.log('Response status:', response.status);\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch gallery images.');\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Images fetched successfully:', result.images);\r\n      setGallery(result.images); // Save the list of image URLs\r\n    } catch (error) {\r\n      console.error('Error fetching gallery:', error);\r\n      alert('Failed to fetch gallery images.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Fetch gallery images when the component loads\r\n  useEffect(() => {\r\n    fetchGallery();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\r\n      <h1>Gallery</h1>\r\n\r\n      {/* Gallery Section */}\r\n      <div>\r\n        <h2>Image Gallery</h2>\r\n        {isLoading ? (\r\n          <p>Loading gallery...</p>\r\n        ) : gallery.length === 0 ? (\r\n          <p>No images found in the gallery.</p>\r\n        ) : (\r\n          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>\r\n            {gallery.map((url, index) => (\r\n              <img\r\n                key={index}\r\n                src={url}\r\n                alt={`Gallery ${index}`}\r\n                style={{ width: '200px', height: '200px', objectFit: 'cover', border: '1px solid #ccc', borderRadius: '5px' }}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
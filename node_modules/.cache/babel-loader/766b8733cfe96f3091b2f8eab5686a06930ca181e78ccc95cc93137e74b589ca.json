{"ast":null,"code":"var _jsxFileName = \"D:\\\\drawing-app\\\\src\\\\NoteItCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport \"./NoteItCanvas.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteItCanvas = () => {\n  _s();\n  const [note, setNote] = useState(\"\");\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState(\"#000000\"); // Default brush color: black\n  const [brushSize, setBrushSize] = useState(5); // Brush size control\n  const [isErasing, setIsErasing] = useState(false); // Eraser mode\n  const [tool, setTool] = useState(\"brush\"); // Current tool: brush, rectangle, circle, triangle\n  const [shapes, setShapes] = useState([]); // Store drawn shapes\n  const [dragging, setDragging] = useState(false); // Is a shape being dragged?\n  const [draggedShapeIndex, setDraggedShapeIndex] = useState(null); // Which shape is being dragged?\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  }); // Offset for drag start\n\n  // Function to resize the canvas to fit its container\n  const resizeCanvas = () => {\n    if (canvasRef.current) {\n      const container = canvasRef.current.canvasContainer;\n      const canvas = container.querySelector(\"canvas\");\n      if (canvas) {\n        // Set the canvas dimensions to match the container\n        canvas.width = container.offsetWidth;\n        canvas.height = container.offsetHeight;\n      }\n    }\n  };\n\n  // Resize the canvas on component mount and window resize\n  useEffect(() => {\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\n  }, []);\n\n  // Function to toggle between eraser and brush\n  const toggleEraser = () => {\n    setIsErasing(!isErasing);\n    setColor(isErasing ? \"#000000\" : \"#FFFFFF\");\n  };\n\n  // Function to save the drawing as an image\n  const saveDrawing = () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvasContainer.children[1];\n    const dataUrl = canvas.toDataURL(\"image/png\");\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"drawing.png\";\n    link.click();\n  };\n\n  // Function to simulate upload (for demonstration)\n  const uploadToGallery = () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvasContainer.children[1];\n    const dataUrl = canvas.toDataURL(\"image/png\");\n    console.log(\"Uploading to gallery:\", dataUrl);\n    alert(\"Drawing uploaded to gallery!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"NoteIt Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Brush Color: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"color\",\n        value: color,\n        onChange: e => setColor(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Brush Size: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"50\",\n        value: brushSize,\n        onChange: e => setBrushSize(parseInt(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleEraser,\n        children: isErasing ? \"Switch to Brush\" : \"Switch to Eraser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveDrawing,\n        children: \"Save Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: uploadToGallery,\n        children: \"Upload to Gallery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Write your note...\",\n      value: note,\n      onChange: e => setNote(e.target.value),\n      className: \"note-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvasRef,\n      brushColor: color,\n      brushRadius: brushSize,\n      lazyRadius: 0,\n      canvasWidth: 800,\n      canvasHeight: 500,\n      className: \"drawing-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteItCanvas, \"Jge2t8S5+D/GAbF1lJbRYWzrpOY=\");\n_c = NoteItCanvas;\nexport default NoteItCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteItCanvas\");","map":{"version":3,"names":["React","useState","useRef","useEffect","CanvasDraw","jsxDEV","_jsxDEV","NoteItCanvas","_s","note","setNote","canvasRef","color","setColor","brushSize","setBrushSize","isErasing","setIsErasing","tool","setTool","shapes","setShapes","dragging","setDragging","draggedShapeIndex","setDraggedShapeIndex","offset","setOffset","x","y","resizeCanvas","current","container","canvasContainer","canvas","querySelector","width","offsetWidth","height","offsetHeight","window","addEventListener","removeEventListener","toggleEraser","saveDrawing","children","dataUrl","toDataURL","link","document","createElement","href","download","click","uploadToGallery","console","log","alert","className","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","min","max","parseInt","onClick","placeholder","ref","brushColor","brushRadius","lazyRadius","canvasWidth","canvasHeight","_c","$RefreshReg$"],"sources":["D:/drawing-app/src/NoteItCanvas.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport \"./NoteItCanvas.css\"; // Import the CSS file\r\n\r\nconst NoteItCanvas = () => {\r\n  const [note, setNote] = useState(\"\");\r\n  const canvasRef = useRef(null);\r\n  const [color, setColor] = useState(\"#000000\"); // Default brush color: black\r\n  const [brushSize, setBrushSize] = useState(5); // Brush size control\r\n  const [isErasing, setIsErasing] = useState(false); // Eraser mode\r\n  const [tool, setTool] = useState(\"brush\"); // Current tool: brush, rectangle, circle, triangle\r\n  const [shapes, setShapes] = useState([]); // Store drawn shapes\r\n  const [dragging, setDragging] = useState(false); // Is a shape being dragged?\r\n  const [draggedShapeIndex, setDraggedShapeIndex] = useState(null); // Which shape is being dragged?\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 }); // Offset for drag start\r\n\r\n  // Function to resize the canvas to fit its container\r\n  const resizeCanvas = () => {\r\n    if (canvasRef.current) {\r\n      const container = canvasRef.current.canvasContainer;\r\n      const canvas = container.querySelector(\"canvas\");\r\n\r\n      if (canvas) {\r\n        // Set the canvas dimensions to match the container\r\n        canvas.width = container.offsetWidth;\r\n        canvas.height = container.offsetHeight;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Resize the canvas on component mount and window resize\r\n  useEffect(() => {\r\n    resizeCanvas();\r\n    window.addEventListener(\"resize\", resizeCanvas);\r\n    return () => window.removeEventListener(\"resize\", resizeCanvas);\r\n  }, []);\r\n\r\n  // Function to toggle between eraser and brush\r\n  const toggleEraser = () => {\r\n    setIsErasing(!isErasing);\r\n    setColor(isErasing ? \"#000000\" : \"#FFFFFF\");\r\n  };\r\n\r\n  // Function to save the drawing as an image\r\n  const saveDrawing = () => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current.canvasContainer.children[1];\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n    const link = document.createElement(\"a\");\r\n    link.href = dataUrl;\r\n    link.download = \"drawing.png\";\r\n    link.click();\r\n  };\r\n\r\n  // Function to simulate upload (for demonstration)\r\n  const uploadToGallery = () => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current.canvasContainer.children[1];\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n    console.log(\"Uploading to gallery:\", dataUrl);\r\n    alert(\"Drawing uploaded to gallery!\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"note-container\">\r\n      <h2>NoteIt Canvas</h2>\r\n      <div className=\"controls\">\r\n        <label>Brush Color: </label>\r\n        <input\r\n          type=\"color\"\r\n          value={color}\r\n          onChange={(e) => setColor(e.target.value)}\r\n        />\r\n        <label>Brush Size: </label>\r\n        <input\r\n          type=\"number\"\r\n          min=\"1\"\r\n          max=\"50\"\r\n          value={brushSize}\r\n          onChange={(e) => setBrushSize(parseInt(e.target.value))}\r\n        />\r\n        <button onClick={toggleEraser}>\r\n          {isErasing ? \"Switch to Brush\" : \"Switch to Eraser\"}\r\n        </button>\r\n        <button onClick={saveDrawing}>Save Drawing</button>\r\n        <button onClick={uploadToGallery}>Upload to Gallery</button>\r\n      </div>\r\n      <textarea\r\n        placeholder=\"Write your note...\"\r\n        value={note}\r\n        onChange={(e) => setNote(e.target.value)}\r\n        className=\"note-input\"\r\n      />\r\n      <CanvasDraw\r\n        ref={canvasRef}\r\n        brushColor={color}\r\n        brushRadius={brushSize}\r\n        lazyRadius={0}\r\n        canvasWidth={800}\r\n        canvasHeight={500}\r\n        className=\"drawing-canvas\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteItCanvas;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
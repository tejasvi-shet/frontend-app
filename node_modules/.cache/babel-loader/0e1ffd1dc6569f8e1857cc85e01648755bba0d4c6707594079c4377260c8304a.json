{"ast":null,"code":"var _jsxFileName = \"D:\\\\drawing-app\\\\src\\\\NoteItCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport \"./NoteItCanvas.css\"; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteItCanvas = () => {\n  _s();\n  const [note, setNote] = useState(\"\");\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState(\"#000\"); // Default brush color: black\n  const [brushSize, setBrushSize] = useState(5); // Brush size control\n  const [isErasing, setIsErasing] = useState(false); // Eraser mode\n\n  // Function to toggle between eraser and brush\n  const toggleEraser = () => {\n    if (isErasing) {\n      setColor(\"#000\"); // Restore original color\n    } else {\n      setColor(\"#FFFFFF\"); // White color for eraser effect\n    }\n    setIsErasing(!isErasing);\n  };\n\n  // Function to save the drawing as an image\n  const saveDrawing = () => {\n    if (!canvasRef.current) return;\n    const canvas = canvasRef.current.canvasContainer.children[1];\n    const dataUrl = canvas.toDataURL(\"image/png\");\n    const link = document.createElement(\"a\");\n    link.href = dataUrl;\n    link.download = \"drawing.png\"; // File name for the saved image\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"10\",\n      value: brushSize,\n      onChange: e => setBrushSize(Number(e.target.value)),\n      style: {\n        marginBottom: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"color\",\n      value: color,\n      onChange: e => {\n        setColor(e.target.value);\n        setIsErasing(false); // Disable eraser when changing color\n      },\n      style: {\n        margin: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CanvasDraw, {\n      ref: canvasRef,\n      brushColor: color,\n      brushRadius: brushSize,\n      lazyRadius: 0,\n      canvasWidth: Math.min(window.innerWidth * 0.9, 320) // Responsive width\n      ,\n      canvasHeight: Math.min(window.innerHeight * 0.4, 280) // Responsive height\n      ,\n      hideGrid: true,\n      className: \"drawing-canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"note-input\",\n      placeholder: \"Write your note...\",\n      value: note,\n      onChange: e => setNote(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btn-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _canvasRef$current;\n          return (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.clear();\n        },\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _canvasRef$current2;\n          return (_canvasRef$current2 = canvasRef.current) === null || _canvasRef$current2 === void 0 ? void 0 : _canvasRef$current2.undo();\n        },\n        children: \"Undo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleEraser,\n        children: isErasing ? \"Use Brush\" : \"Use Eraser\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveDrawing,\n        children: \"Save Drawing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteItCanvas, \"yf95UTxqH/nC5c24RJ+2GP7qdF0=\");\n_c = NoteItCanvas;\nexport default NoteItCanvas;\nvar _c;\n$RefreshReg$(_c, \"NoteItCanvas\");","map":{"version":3,"names":["React","useState","useRef","CanvasDraw","jsxDEV","_jsxDEV","NoteItCanvas","_s","note","setNote","canvasRef","color","setColor","brushSize","setBrushSize","isErasing","setIsErasing","toggleEraser","saveDrawing","current","canvas","canvasContainer","children","dataUrl","toDataURL","link","document","createElement","href","download","click","className","type","min","max","value","onChange","e","Number","target","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","margin","ref","brushColor","brushRadius","lazyRadius","canvasWidth","Math","window","innerWidth","canvasHeight","innerHeight","hideGrid","placeholder","onClick","_canvasRef$current","clear","_canvasRef$current2","undo","_c","$RefreshReg$"],"sources":["D:/drawing-app/src/NoteItCanvas.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport \"./NoteItCanvas.css\"; // Import the CSS file\r\n\r\nconst NoteItCanvas = () => {\r\n  const [note, setNote] = useState(\"\");\r\n  const canvasRef = useRef(null);\r\n  const [color, setColor] = useState(\"#000\"); // Default brush color: black\r\n  const [brushSize, setBrushSize] = useState(5); // Brush size control\r\n  const [isErasing, setIsErasing] = useState(false); // Eraser mode\r\n\r\n  // Function to toggle between eraser and brush\r\n  const toggleEraser = () => {\r\n    if (isErasing) {\r\n      setColor(\"#000\"); // Restore original color\r\n    } else {\r\n      setColor(\"#FFFFFF\"); // White color for eraser effect\r\n    }\r\n    setIsErasing(!isErasing);\r\n  };\r\n\r\n  // Function to save the drawing as an image\r\n  const saveDrawing = () => {\r\n    if (!canvasRef.current) return;\r\n    const canvas = canvasRef.current.canvasContainer.children[1];\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n    const link = document.createElement(\"a\");\r\n    link.href = dataUrl;\r\n    link.download = \"drawing.png\"; // File name for the saved image\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"note-container\">\r\n      {/* Brush Size Selector */}\r\n      <input\r\n        type=\"range\"\r\n        min=\"1\"\r\n        max=\"10\"\r\n        value={brushSize}\r\n        onChange={(e) => setBrushSize(Number(e.target.value))}\r\n        style={{ marginBottom: \"10px\" }}\r\n      />\r\n\r\n      {/* Color Picker for brush color */}\r\n      <input\r\n        type=\"color\"\r\n        value={color}\r\n        onChange={(e) => {\r\n          setColor(e.target.value);\r\n          setIsErasing(false); // Disable eraser when changing color\r\n        }}\r\n        style={{ margin: \"10px\" }}\r\n      />\r\n\r\n      {/* Drawing Canvas */}\r\n      <CanvasDraw\r\n        ref={canvasRef}\r\n        brushColor={color}\r\n        brushRadius={brushSize}\r\n        lazyRadius={0}\r\n        canvasWidth={Math.min(window.innerWidth * 0.9, 320)} // Responsive width\r\n        canvasHeight={Math.min(window.innerHeight * 0.4, 280)} // Responsive height\r\n        hideGrid\r\n        className=\"drawing-canvas\"\r\n      />\r\n\r\n      {/* Text Input for Notes */}\r\n      <textarea\r\n        className=\"note-input\"\r\n        placeholder=\"Write your note...\"\r\n        value={note}\r\n        onChange={(e) => setNote(e.target.value)}\r\n      />\r\n\r\n      {/* Buttons */}\r\n      <div className=\"btn-group\">\r\n        <button onClick={() => canvasRef.current?.clear()}>Clear</button>\r\n        <button onClick={() => canvasRef.current?.undo()}>Undo</button>\r\n        <button onClick={toggleEraser}>\r\n          {isErasing ? \"Use Brush\" : \"Use Eraser\"}\r\n        </button>\r\n        <button onClick={saveDrawing}>Save Drawing</button> {/* Save button */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteItCanvas;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
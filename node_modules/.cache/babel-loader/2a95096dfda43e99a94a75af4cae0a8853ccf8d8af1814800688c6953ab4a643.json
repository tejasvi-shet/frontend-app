{"ast":null,"code":"import React,{useState}from\"react\";import CanvasDraw from\"react-canvas-draw\";import\"./NoteItCanvas.css\";// For styling\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NoteItCanvas=()=>{const[note,setNote]=useState(\"\");const[canvasRef,setCanvasRef]=useState(null);const[color,setColor]=useState(\"#000\");// Default brush color: black\n// Function to save the drawing as an image\nconst saveDrawing=()=>{const canvas=canvasRef.canvasContainer.children[1];const dataUrl=canvas.toDataURL(\"image/png\");const link=document.createElement(\"a\");link.href=dataUrl;link.download=\"drawing.png\";// File name for the saved image\nlink.click();};return/*#__PURE__*/_jsxs(\"div\",{className:\"note-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"color\",value:color,onChange:e=>setColor(e.target.value)// Update color state when user selects a color\n,style:{margin:'10px'}}),/*#__PURE__*/_jsx(CanvasDraw,{ref:canvas=>setCanvasRef(canvas),brushColor:color// Set the brush color based on selected color\n,brushRadius:2,lazyRadius:0,canvasWidth:300,canvasHeight:300,hideGrid:true,className:\"drawing-canvas\"}),/*#__PURE__*/_jsx(\"textarea\",{className:\"note-input\",placeholder:\"Write your note...\",value:note,onChange:e=>setNote(e.target.value)}),/*#__PURE__*/_jsxs(\"div\",{className:\"btn-group\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>canvasRef.clear(),children:\"Clear\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>canvasRef.undo(),children:\"Undo\"}),/*#__PURE__*/_jsx(\"button\",{onClick:saveDrawing,children:\"Save Drawing\"}),\" \"]})]});};export default NoteItCanvas;","map":{"version":3,"names":["React","useState","CanvasDraw","jsx","_jsx","jsxs","_jsxs","NoteItCanvas","note","setNote","canvasRef","setCanvasRef","color","setColor","saveDrawing","canvas","canvasContainer","children","dataUrl","toDataURL","link","document","createElement","href","download","click","className","type","value","onChange","e","target","style","margin","ref","brushColor","brushRadius","lazyRadius","canvasWidth","canvasHeight","hideGrid","placeholder","onClick","clear","undo"],"sources":["C:/Users/Sanjay Singh/Downloads/drawing-app/src/NoteItCanvas.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport CanvasDraw from \"react-canvas-draw\";\r\nimport \"./NoteItCanvas.css\"; // For styling\r\n\r\nconst NoteItCanvas = () => {\r\n  const [note, setNote] = useState(\"\");\r\n  const [canvasRef, setCanvasRef] = useState(null);\r\n  const [color, setColor] = useState(\"#000\"); // Default brush color: black\r\n\r\n  // Function to save the drawing as an image\r\n  const saveDrawing = () => {\r\n    const canvas = canvasRef.canvasContainer.children[1];\r\n    const dataUrl = canvas.toDataURL(\"image/png\");\r\n    const link = document.createElement(\"a\");\r\n    link.href = dataUrl;\r\n    link.download = \"drawing.png\"; // File name for the saved image\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"note-container\">\r\n      {/* Color Picker for brush color */}\r\n      <input\r\n        type=\"color\"\r\n        value={color}\r\n        onChange={(e) => setColor(e.target.value)}  // Update color state when user selects a color\r\n        style={{ margin: '10px' }}\r\n      />\r\n\r\n      {/* Drawing Canvas */}\r\n      <CanvasDraw\r\n        ref={(canvas) => setCanvasRef(canvas)}\r\n        brushColor={color}  // Set the brush color based on selected color\r\n        brushRadius={2}\r\n        lazyRadius={0}\r\n        canvasWidth={300}\r\n        canvasHeight={300}\r\n        hideGrid\r\n        className=\"drawing-canvas\"\r\n      />\r\n      \r\n      {/* Text Input for Notes */}\r\n      <textarea\r\n        className=\"note-input\"\r\n        placeholder=\"Write your note...\"\r\n        value={note}\r\n        onChange={(e) => setNote(e.target.value)}\r\n      />\r\n\r\n      {/* Buttons */}\r\n      <div className=\"btn-group\">\r\n        <button onClick={() => canvasRef.clear()}>Clear</button>\r\n        <button onClick={() => canvasRef.undo()}>Undo</button>\r\n        <button onClick={saveDrawing}>Save Drawing</button> {/* Save button */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteItCanvas;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,UAAU,KAAM,mBAAmB,CAC1C,MAAO,oBAAoB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE7B,KAAM,CAAAC,YAAY,CAAGA,CAAA,GAAM,CACzB,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGR,QAAQ,CAAC,EAAE,CAAC,CACpC,KAAM,CAACS,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACW,KAAK,CAAEC,QAAQ,CAAC,CAAGZ,QAAQ,CAAC,MAAM,CAAC,CAAE;AAE5C;AACA,KAAM,CAAAa,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,MAAM,CAAGL,SAAS,CAACM,eAAe,CAACC,QAAQ,CAAC,CAAC,CAAC,CACpD,KAAM,CAAAC,OAAO,CAAGH,MAAM,CAACI,SAAS,CAAC,WAAW,CAAC,CAC7C,KAAM,CAAAC,IAAI,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CACxCF,IAAI,CAACG,IAAI,CAAGL,OAAO,CACnBE,IAAI,CAACI,QAAQ,CAAG,aAAa,CAAE;AAC/BJ,IAAI,CAACK,KAAK,CAAC,CAAC,CACd,CAAC,CAED,mBACEnB,KAAA,QAAKoB,SAAS,CAAC,gBAAgB,CAAAT,QAAA,eAE7Bb,IAAA,UACEuB,IAAI,CAAC,OAAO,CACZC,KAAK,CAAEhB,KAAM,CACbiB,QAAQ,CAAGC,CAAC,EAAKjB,QAAQ,CAACiB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAI;AAAA,CAC5CI,KAAK,CAAE,CAAEC,MAAM,CAAE,MAAO,CAAE,CAC3B,CAAC,cAGF7B,IAAA,CAACF,UAAU,EACTgC,GAAG,CAAGnB,MAAM,EAAKJ,YAAY,CAACI,MAAM,CAAE,CACtCoB,UAAU,CAAEvB,KAAQ;AAAA,CACpBwB,WAAW,CAAE,CAAE,CACfC,UAAU,CAAE,CAAE,CACdC,WAAW,CAAE,GAAI,CACjBC,YAAY,CAAE,GAAI,CAClBC,QAAQ,MACRd,SAAS,CAAC,gBAAgB,CAC3B,CAAC,cAGFtB,IAAA,aACEsB,SAAS,CAAC,YAAY,CACtBe,WAAW,CAAC,oBAAoB,CAChCb,KAAK,CAAEpB,IAAK,CACZqB,QAAQ,CAAGC,CAAC,EAAKrB,OAAO,CAACqB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAC1C,CAAC,cAGFtB,KAAA,QAAKoB,SAAS,CAAC,WAAW,CAAAT,QAAA,eACxBb,IAAA,WAAQsC,OAAO,CAAEA,CAAA,GAAMhC,SAAS,CAACiC,KAAK,CAAC,CAAE,CAAA1B,QAAA,CAAC,OAAK,CAAQ,CAAC,cACxDb,IAAA,WAAQsC,OAAO,CAAEA,CAAA,GAAMhC,SAAS,CAACkC,IAAI,CAAC,CAAE,CAAA3B,QAAA,CAAC,MAAI,CAAQ,CAAC,cACtDb,IAAA,WAAQsC,OAAO,CAAE5B,WAAY,CAAAG,QAAA,CAAC,cAAY,CAAQ,CAAC,IAAC,EACjD,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAV,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}